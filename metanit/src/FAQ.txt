/////Коммантарии и общая структура/////

/*
    многострочный комментарий
    Объявление нового класса,
    который содержит код программы
*/

public class Program{   // начало объявления класса Program

    // определение метода main
    public static void main (String args[]){    // объявление нового метода

         System.out.println("Hello Java!");     // вывод строки на консоль
    }   // конец объявления нового метода
} // конец объявления класса Program

-------------------------------------------------------------------------
/////Переменные://///

Структура объявления переменных:
    тип_данных имя_переменной   // объявление переменной
Ограничения для имени переменной:
    * Имя переменной не может начинаться с цифры
    * Нет знаков пунктуации и пробелов
    * Не может быть ключевым словом языка Java
    * Регистрозависимость: int num != int NUM
Пример:
    Объявление одной переменной
        int x = 10; // объявили тип и имя переменной
        System.out.println(x); // вывели значение переменно = 10
    Объявление нескольких переменных
        int x = 10, y = 15;
        System.out.print(x);
        System.out.print(y);
В процессе выполнения кода, можно изменять переменные.
Пример:
    int x = 10; // объявили переменную
    System.out.println(x); // вывели первое присвоенное значение переменной = 10
    x = 25; // изменили ранее присвоенное значение переменной
    System.out.println(x); // вывели уже новое значение переменной = 25
При объявлении переменной через var, тип для нее выводится автоматически,
в зависимости от значения, которое ей присваивается
Пример:
    var x = 10; // значит, var = int
-------------------------------------------------------------------------
/////Константы://///

Отличия констант от переменных:
    * Значение присваивается один раз и навсегда
    * В начале идет ключевое слово final
    * Имя константы, как правило, в верхнем регистре
Пример:
    final int LIMIT = 5;
    System.out.print(LIMIT); // вывели значение константы = 5
-------------------------------------------------------------------------
/////Типы данных://///

    * boolean: хранит значение true или false
    * byte: хранит целое число от -128 до 127
    * short: хранит целое число от -32768 до 32767
    * int: хранит целое число от -2147483648 до 2147483647
    * long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807
    * double: хранит число с плавающей точкой (больше, чем float)
    * float: хранит число с плавающей точкой (меньше, чем double)
    * char: хранит одиночный символ в кодировке UTF-16. Диапазон хранимых значений от 0 до 65535

/////Целые числа://///

    Все целочисленные значения воспринимаются как int.
    Чтобы система поняла, что переменной присвоено значение типа, отличного от int,
    необходимо к числу дописать суффикс l
        Пример:
            * long num = 2147483649L;

/////Числа с плавающей запятой/////

    Все значения с плавающей запятой, система воспринимает как double.
    Чтобы система поняла, что тип переменной float, необходимо к числу дописать суффикс f
        Пример:
            * float fl = 30.6f;

/////Символы и строки/////

    'a' - символьный тип (char)
    "а" - строковый тип (string)
        'a' != "a"
-------------------------------------------------------------------------
/////Консольный ввод/вывод в Java://///

Для взаимодействия с консолью в Java применяется класс System

/////Вывод в консоль/////

Для вывода в классе System определен объект out, в котором определен метод println
    println - Выводит информацию с переносом строки
    print - Выводит информацию в одну строку
    printf - Выводит ворматированную строку, подставляя в неё значение спецификатора (Например:%d)
        Пример:
            System.out.print("Hello world!");

Подстановка в выводимую строку данных:
    Пример:
        public class Program {
            public static void main(String[] args) {
                int x = 5;
                int y = 6;
                // Ниже использован специйикатор %d, который примет первое, затем второе значение
                System.out.printf("x=%d; y=%d \n", x, y);
            }
        }

Виды спецификаторов:
    %d - для вывода целочисленных значений
    %f - для вывода чисел с плавающей запятой
    %с - для вывода одиночного символа
    %s - для вывода строкового значения
        Пример:
        // Выведет Name: Tom  Age: 30  Height: 1,70
            System.out.printf("Name: %s  Age: %d  Height: %.2f \n", name, age, height);

/////Ввод с консоли/////

* Для ввода чаще используют класс Scanner, который использует System.in
* Для использования класса Scanner необходимо импортировать его из пакета java.util.Scanner
* Для получения введенного значения, необходимо указать соответствующий метод:
    * next(): считывает введенную строку до первого пробела
    * nextLine(): считывает всю введенную строку
    * nextInt(): считывает введенное число int
    * nextDouble(): считывает введенное число double
    * nextBoolean(): считывает значение boolean
    * nextByte(): считывает введенное число byte
    * nextFloat(): считывает введенное число float
    * nextShort(): считывает введенное число short
        Пример в файле: input_in_console

-------------------------------------------------------------------------
/////Арифметические операции/////

++ (префиксный инкремент)
    Сначала переменная "а" увеличивается на 1, потом приравнивают к ней "b"
        Пример:
            int a = 8;
            int b = ++a;
            System.out.println(a);  // 9
            System.out.println(b);  // 9

++ (постфиксный инкремент)
    Сначала переменная "а" приравнивается к "b", потом увеличивается "а" на 1
        Пример:
            int a = 8;
            int b = a++;
            System.out.println(a);  // 9
            System.out.println(b);  // 8

-- (префиксный декремент)
    Сначала переменная "a" уменьшается на 1, потом приравнивают к ней "b"
        Пример:
            int a = 8;
            int b = --a;
            System.out.println(a);  // 7
            System.out.println(b);  // 7

-- (постфиксный декремент)
    Сначала переменная "а" приравнивается к "b", потом уменьшается "а" на 1
        Пример:
            int a = 8;
            int b = a--;
            System.out.println(a);  // 7
            System.out.println(b);  // 8

Приоритет математических операций (От высшего к нисшему)
    1.  ++ (постфиксный инкремент), -- (постфиксный декремент)
    2.  ++ (префиксный инкремент), -- (префиксный декремент)
    3.  * (умножение), / (деление), % (остаток от деления)
    4.  + (сложение), - (вычитание)
        Пример:
            int a = 8;
            int b = 7;
            int c = a + 5 * ++b;
            System.out.println(c);  // 48

-------------------------------------------------------------------------
/////Логические операции/////

    * |
        c=a|b; (c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)
    * &
        c=a&b; (c равно true, если и a, и b равны true, иначе c будет равно false)
    * !
        c=!b; (c равно true, если b равно false, иначе c будет равно false)
    * ^
        c=a^b; (c равно true, если либо a, либо b (но не одновременно) равны true, иначе c будет равно false)
    * || (Сначала вычисляет первое значение, потом второе. Может остановить вычисление на первом)
        c=a||b; (c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)
    * && (Сначала вычисляет первое значение, потом второе. Может остановить вычисление на первом)
    c=a&&b; (c равно true, если и a, и b равны true, иначе c будет равно false)

-------------------------------------------------------------------------
/////Операции присваивания/////

    =
        просто приравнивает одно значение другому: c=b;
    +=
        c+=b; (переменной c присваивается результат сложения c и b)
    -=
        c-=b; (переменной c присваивается результат вычитания b из c)
    *=
        c*=b; (переменной c присваивается результат произведения c и b)
    /=
        c/=b; (переменной c присваивается результат деления c на b)
    %=
        c%=b; (переменной c присваивается остаток от деления c на b)
    &=
        c&=b; (переменной c присваивается значение c&b)
    |=
        c|=b; (переменной c присваивается значение c|b)
    ^=
        c^=b; (переменной c присваивается значение c^b)
    <<=
        c<<=b; (переменной c присваивается значение c<<b)
    >>=
        c>>=b; (переменной c присваивается значение c>>b)
    >>>=
        c>>>=b; (переменной c присваивается значение c>>>b)
            Пример:
                int a = 5;
                a += 10;        // 15
                a -= 3;         // 12
                a *= 2;         // 24
                a /= 6;         // 4
                a <<= 4;      // 64
                a >>= 2;      // 16
                System.out.println(a);  // 16

-------------------------------------------------------------------------
/////Преобразования базовых типов данных/////

Усечение рациональных чисел до целых
    Без применения математической библиотеки Java:
        double a = 56.9898;
        int b = (int)a; // Выведет 56
    С применением математической библиотеки Java:
        double a = 56.9898;
        int b = (int)Math.round(a); // Выведет 57

Преобразование при операциях
    Правила:
        1. если один из операндов операции относится к типу double,
        то и второй операнд преобразуется к типу double
        2. если предыдущее условие не соблюдено, а один из операндов операции относится к типу float,
        то и второй операнд преобразуется к типу float
        3. если предыдущие условия не соблюдены, один из операндов операции относится к типу long,
        то и второй операнд преобразуется к типу long
        4. иначе все операнды операции преобразуются к типу int
            Пример:
                int a = 3;
                double b = 4.6;
                double c = a+b; // Выведет 7.6

-------------------------------------------------------------------------
/////Условные конструкции/////

/////Конструкция if/else/////
    Пример 1:
        int num1 = 6;
        int num2 = 8;
        if(num1>num2){
            System.out.println("Первое число больше второго");
        }
        else if(num1<num2){
            System.out.println("Первое число меньше второго");
        }
        else{
            System.out.println("Числа равны");
        }

    Пример 2:
        int num1 = 8;
        int num2 = 6;
        if(num1 > num2 && num1>7){
            System.out.println("Первое число больше второго и больше 7");
        }

/////Конструкция switch/////
    Пример:
        int num = 8; // Ввели переменную
        switch(num){ // Запустили конструкцию

            case 1: // Сравниваем переменную с 1
                System.out.println("число равно 1"); // Если условие выполнено - выводим сообщение
                break; // Прекращаем процесс проверки выполнения условий
            case 8:
                System.out.println("число равно 8");
                num++;
                break;
            case 9:
                System.out.println("число равно 9");
                break;
            default: // Если ни одно из условий не выполнено - прекращаем процесс, выводим сообщение
                System.out.println("число не равно 1, 8, 9");
        }

/////Тернарная операция/////
    [первый операнд - условие] ? [второй операнд] : [третий операнд]
    В зависимости от условия тернарная операция возвращает второй или третий операнд: если условие
    равно true, то возвращается второй операнд; если условие равно false, то третий.
        Пример:
            int x=3;
            int y=2;
            int z = x<y? (x+y) : (x-y); // Если x<y, то z=(x+y). Иначе z=(x-y)
            System.out.println(z);

-------------------------------------------------------------------------
/////Циклы/////

